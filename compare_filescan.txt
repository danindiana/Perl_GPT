Compare this

#!/usr/bin/perl

use strict;
use warnings;
use File::Spec;

# Predefined array of keywords
my @keywords = ("covid", "sustainability", "employment", "sexual", "slavery", "trafficking"); # Replace with your desired keywords

# Subroutine to get user input
sub get_input {
    my ($prompt) = @_;
    print "$prompt: ";
    chomp(my $input = <STDIN>);
    return $input;
}

# Get target directory
my $dir = get_input("Enter the target directory");
print "Target directory: $dir\n";

# Open the directory
opendir(my $dh, $dir) or die "Cannot open directory $dir: $!";
print "Scanning directory...\n";

# Process files in the directory
my @matched_files;
print "Using keywords for matching: @keywords\n"; # Display the keywords being used
foreach my $file (readdir $dh) {
    print "Processing file: $file\n";
    next if -d File::Spec->catfile($dir, $file); # Skip directories
    foreach my $keyword (@keywords) {
        if ($file =~ /\Q$keyword\E/i) { # Case-insensitive match
            push @matched_files, $file;
            print "Match found: $file\n";
            last;
        }
    }
}

closedir $dh;

# Ask user to list matched files
if (@matched_files) {
    my $list_files = get_input("Do you want to list the matched files? (yes/no)");
    if (lc($list_files) eq 'yes') {
        print "Matched Files:\n";
        print "$_\n" foreach @matched_files;
    }

    # Ask user if they want to delete the files
    my $delete_files = get_input("Do you want to delete these files? (yes/no)");
    if (lc($delete_files) eq 'yes') {
        foreach my $file (@matched_files) {
            unlink File::Spec->catfile($dir, $file) or warn "Could not delete $file: $!";
            print "Deleted file: $file\n";
        }
    } else {
        print "No deletion performed.\n";
    }
} else {
    print "No files matched your criteria.\n";
}

# Finished
print "Program completed.\n";

With this:

#!/usr/bin/perl

use strict;
use warnings;
use File::Find;
use File::Spec;

# Predefined array of keywords
my @keywords = ("covid", "sustainability", "employment", "sexual", "slavery", "trafficking"); # Replace with your desired keywords

# Global array to store matched files
my @matched_files;

# Subroutine to get user input
sub get_input {
    my ($prompt) = @_;
    print "$prompt: ";
    chomp(my $input = <STDIN>);
    return $input;
}

# Subroutine to process files
sub process_file {
    my $file = $File::Find::name; # Full path of the file
    return if -d $file; # Skip directories

    foreach my $keyword (@keywords) {
        if ($file =~ /\Q$keyword\E/i) { # Case-insensitive match
            push @matched_files, $file;
            print "Match found: $file\n";
            last;
        }
    }
}

# Get target directory
my $dir = get_input("Enter the target directory");
print "Target directory: $dir\n";

# Ask user if recursive scanning is required
my $recursive = get_input("Do you want to recursively scan all directories? (Y/N)");

# Process files
print "Using keywords for matching: @keywords\n"; # Display the keywords being used

if (uc($recursive) eq 'Y') {
    print "Performing recursive scan...\n";
    find(\&process_file, $dir);
} else {
    opendir(my $dh, $dir) or die "Cannot open directory $dir: $!";
    print "Scanning directory...\n";
    while (my $file = readdir $dh) {
        process_file($file);
    }
    closedir $dh;
}

# Ask user to list matched files
if (@matched_files) {
    my $list_files = get_input("Do you want to list the matched files? (yes/no)");
    if (lc($list_files) eq 'yes') {
        print "Matched Files:\n";
        print "$_\n" foreach @matched_files;
    }

    # Ask user if they want to delete the files
    my $delete_files = get_input("Do you want to delete these files? (yes/no)");
    if (lc($delete_files) eq 'yes') {
        foreach my $file (@matched_files) {
            unlink $file or warn "Could not delete $file: $!";
            print "Deleted file: $file\n";
        }
    } else {
        print "No deletion performed.\n";
    }
} else {
    print "No files matched your criteria.\n";
}

# Finished
print "Program completed.\n";

ChatGPT
Both of these Perl scripts have a similar purpose: to search for files in a directory that contain specific keywords in their names. However, they use slightly different approaches to achieve this goal. Let's compare the two scripts:

Script 1 (First Script):

This script uses the opendir and readdir functions to list files in the target directory.
It processes each file one by one in a loop using foreach my $file (readdir $dh).
It uses a nested loop to iterate over the predefined keywords and checks if any of the keywords are present in the filename using a regular expression match.
If a match is found, it pushes the filename to the @matched_files array.
It provides options to list and delete the matched files.
Script 2 (Second Script):

This script uses the File::Find module to perform a recursive search through the target directory and its subdirectories.
It defines a process_file subroutine, which is called by File::Find for each file found during the search.
The process_file subroutine performs a similar keyword match as in the first script.
It also provides options to list and delete the matched files.
It allows the user to choose whether to perform a recursive or non-recursive scan.
Key Differences:

File Searching Approach:

The first script uses opendir and readdir to manually list files in the directory, while the second script leverages the File::Find module to perform a recursive search.
Recursion:

The second script offers the option to perform a recursive search of all directories within the target directory, while the first script always performs a non-recursive scan.
Functionality:

Both scripts have similar functionality for listing and deleting matched files based on user input.
Complexity:

The second script is slightly more complex due to the use of the File::Find module and the recursive scanning option.
Modules:

The second script uses additional modules (File::Find and File::Spec) to handle file-related operations, making it more versatile for different scenarios.
In summary, both scripts achieve the same goal but use different approaches. The first script is simpler and suitable for non-recursive scans, while the second script provides the flexibility of recursive scanning and leverages additional Perl modules for more robust file handling. The choice between the two scripts depends on your specific requirements.
